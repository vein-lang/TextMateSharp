{
	"information_for_contributors": [
		"This file has been converted from https://github.com/vein-lang/tmLanguage/blob/master/grammars/vein.tmLanguage",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/vein-lang/tmLanguage/commit/13744b15ee51be58abe6b6c8ed6f2e6e12119d7b",
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.vein",
	"name": "Vein Language",
	"patterns": [
		{
			"include": "#method-declaration"
		},
		{
			"include": "#expression-body"
		},
		{
			"include": "#invocation-expression"
		},
		{
			"include": "#type-alias"
		},
		{
			"include": "#global_keywords"
		},
		{
			"include": "#operation-declaration"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#preprocessor"
		},
		{
			"include": "#inline-class-declaration"
		},
		{
			"include": "#class-declaration"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#interpolated-string"
		},
		{
			"include": "#storage-modifier"
		},
		{
			"include": "#backslash-escapes"
		},
		{
			"include": "#union-declaration"
		},
		{
			"include": "#typdef-declaration"
		},
		{
			"include": "#types"
		},
		{
			"include": "#literal"
		}
	],
	"repository": {
		"atype": {
			"patterns": [
				{
					"match": "(@?[_[:alpha:]][_[:alnum:]]*)",
					"name": "entity.name.type.class.vein"
				}
			]
		},
		"type-alias": {
			"begin": "(alias)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.alias.vein"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "entity.name.type.class.vein",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"include": "#type-anonymous-method-declaration"
				}
			]
		},
		"generic-constraints": {
			"begin": "(when)\\s+(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.when.vein"
				},
				"2": {
					"name": "entity.name.type.type-parameter.vein"
				},
				"3": {
					"name": "punctuation.separator.colon.vein"
				}
			},
			"end": "(?=\\{|when|;|=>)",
			"patterns": [
				{
					"name": "storage.type.class.vein",
					"match": "\\bclass\\b"
				},
				{
					"name": "storage.type.struct.vein",
					"match": "\\bstruct\\b"
				},
				{
					"name": "keyword.other.constraint.default.vein",
					"match": "\\bdefault\\b"
				},
				{
					"name": "keyword.other.constraint.notnull.vein",
					"match": "\\bnotnull\\b"
				},
				{
					"name": "keyword.other.constraint.unmanaged.vein",
					"match": "\\bunmanaged\\b"
				},
				{
					"match": "(new)\\s*(\\()\\s*(\\))",
					"captures": {
						"1": {
							"name": "keyword.operator.expression.new.vein"
						},
						"2": {
							"name": "punctuation.parenthesis.open.vein"
						},
						"3": {
							"name": "punctuation.parenthesis.close.vein"
						}
					}
				},
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#generic-constraints"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"include": "#type-declarations"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.vein",
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.vein"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.vein"
						}
					}
				},
				{
					"begin": "(^\\s+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.vein"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"name": "comment.block.documentation.vein",
							"begin": "(?<!/)///(?!/)",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.vein"
								}
							},
							"end": "(?=$)",
							"patterns": [
								{
									"include": "#xml-doc-comment"
								}
							]
						},
						{
							"name": "comment.line.double-slash.vein",
							"begin": "(?<!/)//(?:(?!/)|(?=//))",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.vein"
								}
							},
							"end": "(?=$)"
						}
					]
				}
			]
		},
		"preprocessor": {
			"match": "^\\s*((#)\\s*(use|space|load|ignore))\\b\\s*",
			"name": "meta.preprocessor.vein"
		},
		"global_keywords": {
			"match": "^\\s*(self|gc|this)\\b\\s*",
			"name": "entity.name.type"
		},
		"operators": {
			"patterns": [
				{
					"match": "(?<![\\w$])(sizeof)(?![\\w$])",
					"name": "keyword.operator.sizeof.vein"
				},
				{
					"match": "--",
					"name": "keyword.operator.decrement.vein"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.vein"
				},
				{
					"match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
					"name": "keyword.operator.assignment.compound.vein"
				},
				{
					"match": "&=|\\^=|<<=|>>=|\\|=",
					"name": "keyword.operator.assignment.compound.bitwise.vein"
				},
				{
					"match": "<<|>>",
					"name": "keyword.operator.bitwise.shift.vein"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.vein"
				},
				{
					"match": "&&|!|\\|\\|",
					"name": "keyword.operator.logical.vein"
				},
				{
					"match": "&|\\||\\^|~",
					"name": "keyword.operator.vein"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.vein"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.vein"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.vein",
					"match": "(?<!\\.)\\b(global|await|qnew|qcall|char|this|base|using|auto|const|if|else|while|do|body|for|is|in|return|fail|when)\\b"
				},
				{
					"name": "keyword.control.core.vein",
					"match": "(?<!\\.)\\b(struct|record|union)\\b"
				}
			]
		},
		"storage-modifier": {
			"patterns": [
				{
					"name": "storage.modifier",
					"match": "\\b(gc|override|contract|async|native|virtual|abstract|forwarded|getter|setter|public|special|protected|internal|private|static|readonly|const|extern|auto|extensions)\\b"
				}
			]
		},
		"union-declaration": {
			"begin": "\\b(union)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.union.vein"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "entity.name.type.union.vein",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.vein"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.vein"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#punctuation-semicolon"
						},
						{
							"include": "#operation-declaration"
						},
						{
							"include": "#comment"
						},
						{
							"include": "#property-declaration"
						},
						{
							"include": "#field-declaration"
						}
					]
				}
			]
		},
		"inline-class-declaration": {
			"begin": "\\b(aspect|record)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.class.vein"
				}
			},
			"end": "(?=;)|(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "ddd.dd",
					"match": "((?<variable_name>[a-zA-Z0-9]+)\\s?+\\:\\s?+(?<type_name>[a-zA-Z0-9]+))(,?)+",
					"captures": {
						"2": {
							"name": "entity.name.variable.local.vein"
						},
						"3": {
							"name": "entity.name.type"
						}
					}
				},
				{
					"name": "entity.name.type.class.vein",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.vein"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.vein"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#property-declaration"
						},
						{
							"include": "#field-declaration"
						},
						{
							"include": "#indexer-declaration"
						},
						{
							"include": "#punctuation-semicolon"
						},
						{
							"include": "#operation-declaration"
						},
						{
							"include": "#union-declaration"
						},
						{
							"include": "#constructor-declaration"
						},
						{
							"include": "#destructor-declaration"
						},
						{
							"include": "#storage-modifier"
						},
						{
							"include": "#method-declaration"
						},
						{
							"include": "#attribute-section"
						}
					]
				}
			]
		},
		"class-declaration": {
			"begin": "\\b(class|struct|contract|extensions|interface)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.class.vein"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "entity.name.type.class.vein",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.vein"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.vein"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#property-declaration"
						},
						{
							"include": "#field-declaration"
						},
						{
							"include": "#indexer-declaration"
						},
						{
							"include": "#punctuation-semicolon"
						},
						{
							"include": "#operation-declaration"
						},
						{
							"include": "#union-declaration"
						},
						{
							"include": "#storage-modifier"
						},
						{
							"include": "#constructor-declaration"
						},
						{
							"include": "#destructor-declaration"
						},
						{
							"include": "#method-declaration"
						},
						{
							"include": "#attribute-section"
						}
					]
				}
			]
		},
		"indexer-declaration": {
			"begin": "(this)(?>\\s?+)\\[(.+)\\](?>\\s?+)\\:(?>\\s?+)(@?[_[:alpha:]][_[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.vein"
				},
				"2": {
					"patterns": [
						{
							"include": "#operation-argument-list"
						}
					]
				},
				"3": {
					"name": "entity.name.type"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"name": "entity.name.variable.field.vein",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#class-or-struct-members"
				},
				{
					"include": "#literal"
				}
			]
		},
		"field-declaration": {
			"begin": "(@?[_[:alpha:]][_[:alnum:]]*)(?>\\s?+)\\:(?>\\s?+)(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?!=>|==)(?=,|;|=|$)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.variable.field.vein"
				},
				"2": {
					"name": "entity.name.type"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"name": "entity.name.variable.field.vein",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#class-or-struct-members"
				},
				{
					"include": "#expression"
				}
			]
		},
		"constructor-declaration": {
			"begin": "(new)(?>\\s?+)\\(((?>.)+)?\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.new.vein"
				},
				"2": {
					"patterns": [
						{
							"include": "#operation-argument-list"
						}
					]
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#parenthesized-parameter-list"
				},
				{
					"include": "#generic-constraints"
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#block"
				},
				{
					"include": "#shortform-expression"
				}
			]
		},
		"destructor-declaration": {
			"begin": "(?<!\\.)(delete)(?>\\s?+)\\(((?>.)+)?\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.new.vein"
				},
				"2": {
					"patterns": [
						{
							"include": "#operation-argument-list"
						}
					]
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#parenthesized-parameter-list"
				},
				{
					"include": "#generic-constraints"
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#block"
				},
				{
					"include": "#shortform-expression"
				}
			]
		},
		"type-parameter-list": {
			"begin": "\\<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.begin.vein"
				}
			},
			"end": "\\>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.end.vein"
				}
			},
			"patterns": [
				{
					"match": "(@?[_[:alpha:]][_[:alnum:]]*)\\b",
					"name": "entity.name.type.type-parameter.vein"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#attribute-section"
				}
			]
		},
		"method-declaration": {
			"begin": "(?<identifier>[_[:alpha:]][_[:alnum:]]*)(?>\\s?+)(\\<(?>.)+\\>)?\\(((?>.)+)?\\)(?>\\s?+)\\:(?>\\s?+)(@?[_[:alpha:]][_[:alnum:]]*)\\s?+(\\|\\>)?",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.vein"
				},
				"2": {
					"patterns": [
						{
							"include": "#type-parameter-list"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"include": "#operation-argument-list"
						}
					]
				},
				"4": {
					"name": "entity.name.type"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#global_keywords"
				},
				{
					"include": "#parenthesized-parameter-list"
				},
				{
					"include": "#generic-constraints"
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#block"
				},
				{
					"include": "#invocation-expression"
				},
				{
					"include": "#shortform-expression"
				}
			]
		},
		"type-anonymous-method-declaration": {
			"begin": "(?>\\s?+)\\(((?>.)+)?\\)(?>\\s?+)\\:(?>\\s?+)(@?[_[:alpha:]][_[:alnum:]]*)\\s?+(\\|\\>)?",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#operation-argument-list"
						}
					]
				},
				"2": {
					"name": "entity.name.type"
				}
			},
			"end": "(?<=\\})|(?=;)"
		},
		"shortform-expression": {
			"begin": "(\\|>)\\s?+",
			"beginCaptures": {
				"1": {
					"name": "entity.operator.pipe.vein"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"include": "#expression-call"
				},
				{
					"include": "#fail-statement"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#global_keywords"
				},
				{
					"include": "#expression-call"
				}
			]
		},
		"intrusive": {
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				}
			]
		},
		"typdef-declaration": {
			"begin": "(\\#typedef)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.typedef.vein"
				}
			},
			"end": "(?<=\\=)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "entity.name.type.class.vein",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.vein"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.vein"
						}
					},
					"patterns": [
						{
							"include": "#punctuation-semicolon"
						}
					]
				}
			]
		},
		"expression-body": {
			"begin": "\\|>",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.arrow.vein"
				}
			},
			"end": "(?=[,\\);}])",
			"patterns": [
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#expression"
				}
			]
		},
		"invocation-expression": {
			"begin": "(?x)\n(?:\n    (?:(\\?)\\s*)?   # preceding null-conditional operator?\n    (\\.)\\s*|       # preceding dot?\n    (->)\\s*        # preceding pointer arrow?\n)?\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*   # method name\n(\n    <\n    (?<type_args>\n        [^<>()]++|\n        <\\g<type_args>*+>|\n        \\(\\g<type_args>*+\\)\n    )*+\n    >\\s*\n)?      # type arguments\n(?=\\()  # open paren of argument list",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.null-conditional.vein"
				},
				"2": {
					"name": "punctuation.accessor.vein"
				},
				"3": {
					"name": "punctuation.accessor.pointer.vein"
				},
				"4": {
					"name": "entity.name.function.vein"
				},
				"5": {
					"patterns": [
						{
							"include": "#type-arguments"
						}
					]
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#argument-list"
				}
			]
		},
		"anonymous-method-expression": {
			"patterns": [
				{
					"begin": "(?x)\n((?:\\b(?:async|static)\\b\\s*)*)\n(?:\n  (@?[_[:alpha:]][_[:alnum:]]*)\\b|\n  (\\()\n    (?<tuple>(?:[^()]|\\(\\g<tuple>\\))*)\n  (\\))\n)\\s*\n(\\|>)",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"match": "async|static",
									"name": "storage.modifier.$0.vein"
								}
							]
						},
						"2": {
							"name": "entity.name.variable.parameter.vein"
						},
						"3": {
							"name": "punctuation.parenthesis.open.vein"
						},
						"4": {
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"include": "#explicit-anonymous-function-parameter"
								},
								{
									"include": "#implicit-anonymous-function-parameter"
								},
								{
									"include": "#default-argument"
								},
								{
									"include": "#punctuation-comma"
								}
							]
						},
						"5": {
							"name": "punctuation.parenthesis.close.vein"
						},
						"6": {
							"name": "keyword.operator.arrow.vein"
						}
					},
					"end": "(?=[,;)}])",
					"patterns": [
						{
							"include": "#intrusive"
						},
						{
							"begin": "(?={)",
							"end": "(?=[,;)}])",
							"patterns": [
								{
									"include": "#block"
								},
								{
									"include": "#intrusive"
								}
							]
						},
						{
							"begin": "\\b(ref)\\b|(?=\\S)",
							"beginCaptures": {
								"1": {
									"name": "storage.modifier.ref.vein"
								}
							},
							"end": "(?=[,;)}])",
							"patterns": [
								{
									"include": "#expression"
								}
							]
						}
					]
				},
				{
					"begin": "(?x)\n((?:\\b(?:async|static)\\b\\s*)*)\n\\b(delegate)\\b\\s*",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"match": "async|static",
									"name": "storage.modifier.$0.vein"
								}
							]
						},
						"2": {
							"name": "storage.type.delegate.vein"
						}
					},
					"end": "(?<=})|(?=[,;)}])",
					"patterns": [
						{
							"include": "#intrusive"
						},
						{
							"begin": "\\(",
							"beginCaptures": {
								"0": {
									"name": "punctuation.parenthesis.open.vein"
								}
							},
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "punctuation.parenthesis.close.vein"
								}
							},
							"patterns": [
								{
									"include": "#intrusive"
								},
								{
									"include": "#explicit-anonymous-function-parameter"
								},
								{
									"include": "#punctuation-comma"
								}
							]
						},
						{
							"include": "#block"
						}
					]
				}
			]
		},
		"block": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.open.vein"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.close.vein"
				}
			},
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"statement": {
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#while-statement"
				},
				{
					"include": "#expression-operator-expression"
				},
				{
					"include": "#context-control-statement"
				},
				{
					"include": "#context-control-paren-statement"
				},
				{
					"include": "#labeled-statement"
				},
				{
					"include": "#object-creation-expression"
				},
				{
					"include": "#array-creation-expression"
				},
				{
					"include": "#anonymous-object-creation-expression"
				},
				{
					"include": "#local-declaration"
				},
				{
					"include": "#block"
				},
				{
					"include": "#do-statement"
				},
				{
					"include": "#for-statement"
				},
				{
					"include": "#foreach-statement"
				},
				{
					"include": "#if-statement"
				},
				{
					"include": "#else-part"
				},
				{
					"include": "#switch-statement"
				},
				{
					"include": "#goto-statement"
				},
				{
					"include": "#return-statement"
				},
				{
					"include": "#fail-statement"
				},
				{
					"include": "#break-or-continue-statement"
				},
				{
					"include": "#yield-statement"
				},
				{
					"include": "#await-statement"
				},
				{
					"include": "#try-statement"
				},
				{
					"include": "#checked-unchecked-statement"
				},
				{
					"include": "#lock-statement"
				},
				{
					"include": "#using-statement"
				},
				{
					"include": "#labeled-statement"
				},
				{
					"include": "#local-declaration"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"while-statement": {
			"begin": "(?<!\\.)\\b(while)\\b\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.while.vein"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.vein"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.vein"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"for-statement": {
			"begin": "(?<!\\.)\\b(for)\\b\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.for.vein"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.vein"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.vein"
						}
					},
					"patterns": [
						{
							"include": "#local-variable-declaration"
						},
						{
							"include": "#expression"
						},
						{
							"include": "#punctuation-comma"
						},
						{
							"include": "#punctuation-semicolon"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"break-or-continue-statement": {
			"match": "(?<!\\.)\\b(break|continue)\\b",
			"name": "keyword.control.flow.$1.vein"
		},
		"yield-statement": {
			"patterns": [
				{
					"include": "#yield-return-statement"
				},
				{
					"include": "#yield-break-statement"
				}
			]
		},
		"yield-return-statement": {
			"begin": "(?<!\\.)\\b(yield)\\b\\s*\\b(return)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.flow.yield.vein"
				},
				"2": {
					"name": "keyword.control.flow.return.vein"
				}
			},
			"end": "(?=[;}])",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"await-statement": {
			"begin": "(?<!\\.\\s*)\\b(await)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.expression.await.vein"
				}
			},
			"end": "(?<=})|(?=;|})",
			"patterns": [
				{
					"include": "#foreach-statement"
				},
				{
					"include": "#using-statement"
				},
				{
					"include": "#expression"
				}
			]
		},
		"await-expression": {
			"name": "keyword.operator.expression.await.vein",
			"match": "(?<!\\.\\s*)\\b(await)\\b"
		},
		"qnew-expression": {
			"name": "keyword.operator.expression.qnew.vein",
			"match": "(?<!\\.\\s*)\\b(qnew)\\b"
		},
		"yield-break-statement": {
			"match": "(?<!\\.)\\b(yield)\\b\\s*\\b(break)\\b",
			"captures": {
				"1": {
					"name": "keyword.control.flow.yield.vein"
				},
				"2": {
					"name": "keyword.control.flow.break.vein"
				}
			}
		},
		"local-declaration": {
			"patterns": [
				{
					"include": "#local-constant-declaration"
				},
				{
					"include": "#local-variable-declaration"
				},
				{
					"include": "#local-function-declaration"
				}
			]
		},
		"try-statement": {
			"patterns": [
				{
					"include": "#try-block"
				},
				{
					"include": "#catch-clause"
				},
				{
					"include": "#finally-clause"
				}
			]
		},
		"try-block": {
			"begin": "(?<!\\.)\\b(try)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.exception.try.vein"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#block"
				}
			]
		},
		"finally-clause": {
			"begin": "(?<!\\.)\\b(finally)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.exception.finally.vein"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#block"
				}
			]
		},
		"catch-clause": {
			"begin": "(?<!\\.)\\b(catch)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.exception.catch.vein"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.vein"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.vein"
						}
					},
					"patterns": [
						{
							"match": "(?x)\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)?\n      (?<name_and_type_args>\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* |\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)?\n    (?:\\s*\n      \\[\n        (?:\\s*,\\s*)*\n      \\]\n      \\s*\n      (?:\\?)?\n      \\s*\n    )*\n  )\n)\\s*\n(?:(\\g<identifier>)\\b)?",
							"captures": {
								"1": {
									"patterns": [
										{
											"include": "#type"
										}
									]
								},
								"6": {
									"name": "entity.name.variable.local.vein"
								}
							}
						}
					]
				},
				{
					"include": "#when-clause"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#block"
				}
			]
		},
		"when-clause": {
			"begin": "(?<!\\.)\\b(when)\\b\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.exception.when.vein"
				},
				"2": {
					"name": "punctuation.parenthesis.open.vein"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.vein"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#comment"
				}
			]
		},
		"if-statement": {
			"begin": "(?<!\\.)\\b(if)\\b\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.if.vein"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.vein"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.vein"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"else-part": {
			"begin": "(?<!\\.)\\b(else)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.else.vein"
				}
			},
			"end": "(?<=})|(?=;)",
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"return-statement": {
			"begin": "(?<!\\.)\\b(return)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.flow.return.vein"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#expression"
				}
			]
		},
		"fail-statement": {
			"begin": "(?<!\\.)\\b(fail)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.flow.fail.vein"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#expression"
				}
			]
		},
		"throw-statement": {
			"begin": "(?<!\\.)\\b(fail)([\\w\\W\\d\\D\\s\\n]+)(?=;)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.flow.fail.vein"
				},
				"2": {
					"name": "mana.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"type-builtin": {
			"patterns": [
				{
					"include": "#types"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"match": "(byte|float|double|bool|string|void|([ui|i](nt16|nt32|nt64)))\\b",
					"name": "support.type.vein"
				},
				{
					"match": "\\b%?(invalid)\\b",
					"name": "invalid.deprecated"
				}
			]
		},
		"punctuation-hash": {
			"name": "punctuation.separator.hash.vein",
			"match": "#"
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.vein",
			"match": ","
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.vein",
			"match": ";"
		},
		"punctuation-accessor": {
			"name": "punctuation.accessor.vein",
			"match": "\\."
		},
		"type-name": {
			"patterns": [
				{
					"match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)",
					"captures": {
						"1": {
							"name": "entity.name.type.alias.vein"
						},
						"2": {
							"name": "punctuation.separator.coloncolon.vein"
						}
					}
				},
				{
					"match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\.)",
					"captures": {
						"1": {
							"name": "entity.name.type"
						},
						"2": {
							"name": "punctuation.accessor.vein"
						}
					}
				},
				{
					"match": "(\\.)\\s*(@?[_[:alpha:]][_[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.vein"
						},
						"2": {
							"name": "entity.name.type"
						}
					}
				},
				{
					"name": "entity.name.type",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				}
			]
		},
		"type-arguments": {
			"begin": "<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.begin.vein"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.end.vein"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"line_continuation_character": {
			"patterns": [
				{
					"match": "(\\\\)\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.vein"
						}
					}
				}
			]
		},
		"backslash-escapes": {
			"match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3][0-7]{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
			"name": "constant.character.escape.vein"
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.vein"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.vein"
						}
					},
					"name": "string.quoted.double.vein",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.vein"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.vein"
						}
					},
					"name": "string.quoted.single.vein",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"interpolated-string": {
			"name": "string.quoted.double.vein",
			"begin": "\\$\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.vein"
				}
			},
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.vein"
				},
				"2": {
					"name": "invalid.illegal.newline.vein"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				},
				{
					"include": "#interpolation"
				}
			]
		},
		"interpolation": {
			"name": "meta.interpolation.vein",
			"begin": "(?<=[^\\{]|^)((?:\\{\\{)*)(\\{)(?=[^\\{])",
			"beginCaptures": {
				"1": {
					"name": "string.quoted.double.vein"
				},
				"2": {
					"name": "punctuation.definition.interpolation.begin.vein"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.interpolation.end.vein"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#expression-operator-expression"
				},
				{
					"include": "#type-operator-expression"
				},
				{
					"include": "#default-literal-expression"
				},
				{
					"include": "#type-builtin"
				},
				{
					"include": "#language-variable"
				},
				{
					"include": "#switch-statement-or-expression"
				},
				{
					"include": "#with-expression"
				},
				{
					"include": "#assignment-expression"
				},
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#global_keywords"
				},
				{
					"include": "#checked-unchecked-expression"
				},
				{
					"include": "#typeof-or-default-expression"
				},
				{
					"include": "#nameof-expression"
				},
				{
					"include": "#fail-expression"
				},
				{
					"include": "#interpolated-string"
				},
				{
					"include": "#verbatim-interpolated-string"
				},
				{
					"include": "#this-or-base-expression"
				},
				{
					"include": "#conditional-operator"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#await-expression"
				},
				{
					"include": "#qnew-expression"
				},
				{
					"include": "#query-expression"
				},
				{
					"include": "#as-expression"
				},
				{
					"include": "#is-expression"
				},
				{
					"include": "#anonymous-method-expression"
				},
				{
					"include": "#object-creation-expression"
				},
				{
					"include": "#array-creation-expression"
				},
				{
					"include": "#anonymous-object-creation-expression"
				},
				{
					"include": "#invocation-expression"
				},
				{
					"include": "#member-access-expression"
				},
				{
					"include": "#element-access-expression"
				},
				{
					"include": "#cast-expression"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#parenthesized-expression"
				},
				{
					"include": "#tuple-deconstruction-assignment"
				},
				{
					"include": "#initializer-expression"
				},
				{
					"include": "#expression-call"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"expression-call": {
			"name": "expression.invocation.vein",
			"begin": "(?x)([_$a-zA-Z][$\\w]*)\\s*\\(",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.member"
				}
			},
			"end": "(?=;|\\))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string-literal"
				},
				{
					"include": "#parenthesized-parameter-list"
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#argument-list-raw"
				}
			]
		},
		"argument-list-raw": {
			"match": "\\,?\\s*((?:\\w+)+)\\s*",
			"captures": {
				"1": {
					"name": "argument.item.vein",
					"patterns": [
						{
							"include": "#argument"
						},
						{
							"include": "#expression"
						},
						{
							"include": "#punctuation-comma"
						}
					]
				}
			}
		},
		"identifier": {
			"name": "variable.other.readwrite.vein",
			"match": "@?[_[:alpha:]][_[:alnum:]]*"
		},
		"fail-expression": {
			"match": "\\b(fail)\\b",
			"captures": {
				"1": {
					"name": "keyword.control.flow.fail.vein"
				}
			}
		},
		"literal": {
			"patterns": [
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#null-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#char-literal"
				},
				{
					"include": "#string-literal"
				},
				{
					"include": "#verbatim-string-literal"
				},
				{
					"include": "#tuple-literal"
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.vein",
					"match": "(?<!\\.)\\btrue\\b"
				},
				{
					"name": "constant.language.boolean.false.vein",
					"match": "(?<!\\.)\\bfalse\\b"
				}
			]
		},
		"null-literal": {
			"name": "constant.language.null.vein",
			"match": "(?<!\\.)\\bnull\\b"
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.vein",
					"match": "\\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.binary.vein",
					"match": "\\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.decimal.vein",
					"match": "\\b([0-9_]+)?\\.[0-9_]+((e|E)(\\-?)[0-9]+)?(F|f|D|d|M|m|H|h)?\\b"
				},
				{
					"name": "constant.numeric.decimal.vein",
					"match": "\\b[0-9_]+(e|E)(\\-?)[0-9_]+(F|f|D|d|M|m|H|h)?\\b"
				},
				{
					"name": "constant.numeric.decimal.vein",
					"match": "\\b[0-9_]+(F|f|D|d|M|m|H|h)\\b"
				},
				{
					"name": "constant.numeric.decimal.vein",
					"match": "\\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.decimal.vein",
					"match": "\\b(NaN|Infinity)\\b"
				}
			]
		},
		"type-declarations": {
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#storage-modifier"
				},
				{
					"include": "#class-declaration"
				},
				{
					"include": "#delegate-declaration"
				},
				{
					"include": "#enum-declaration"
				},
				{
					"include": "#interface-declaration"
				},
				{
					"include": "#struct-declaration"
				},
				{
					"include": "#record-declaration"
				},
				{
					"include": "#attribute-section"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"xml-doc-comment": {
			"name": "xml.doc.comment.vein"
		},
		"ref-modifier": {
			"name": "constant.ref.vein"
		},
		"explicit-anonymous-function-parameter": {
			"name": "constant.explicit-anonymous-function-parameter"
		},
		"language-variable": {
			"patterns": [
				{
					"name": "variable.language.$1.vein",
					"match": "\\b(base|this|self)\\b"
				},
				{
					"name": "variable.other.$1.vein",
					"match": "\\b(value)\\b"
				}
			]
		},
		"parenthesized-expression": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.vein"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.vein"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"element-access-expression": {
			"begin": "(?x)\n(?:\n    (?:(\\?)\\s*)?\n    (\\.)\\s*|\n    (->)\\s*\n)?\n(?:(@?[_[:alpha:]][_[:alnum:]]*)\\s*)? # property name\n(?:(\\?)\\s*)?\n(?=\\[)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.null-conditional.vein"
				},
				"2": {
					"name": "punctuation.accessor.vein"
				},
				"3": {
					"name": "punctuation.accessor.pointer.vein"
				},
				"4": {
					"name": "variable.other.object.property.vein"
				},
				"5": {
					"name": "keyword.operator.null-conditional.vein"
				}
			},
			"end": "(?<=\\])(?!\\s*\\[)",
			"patterns": [
				{
					"include": "#bracketed-argument-list"
				}
			]
		},
		"member-access-expression": {
			"patterns": [
				{
					"match": "(?x)\n(?:\n    (?:(\\?)\\s*)?\n    (\\.)\\s*|\n    (->)\\s*\n)\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*\n(?![_[:alnum:]]|\\(|(\\?)?\\[|<)",
					"captures": {
						"1": {
							"name": "keyword.operator.null-conditional.vein"
						},
						"2": {
							"name": "punctuation.accessor.vein"
						},
						"3": {
							"name": "punctuation.accessor.pointer.vein"
						},
						"4": {
							"name": "variable.other.object.property.vein"
						}
					}
				},
				{
					"match": "(?x)\n(\\.)?\\s*\n(@?[_[:alpha:]][_[:alnum:]]*)\n(?<type_params>\\s*<([^<>]|\\g<type_params>)+>\\s*)\n(?=\n    (\\s*\\?)?\n    \\s*\\.\\s*@?[_[:alpha:]][_[:alnum:]]*\n)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.vein"
						},
						"2": {
							"name": "variable.other.object.vein"
						},
						"3": {
							"patterns": [
								{
									"include": "#type-arguments"
								}
							]
						}
					}
				},
				{
					"match": "(?x)\n(@?[_[:alpha:]][_[:alnum:]]*)\n(?=\n    \\s*(?:(?:\\?\\s*)?\\.|->)\n    \\s*@?[_[:alpha:]][_[:alnum:]]*\n)",
					"captures": {
						"1": {
							"name": "variable.other.object.vein"
						}
					}
				}
			]
		},
		"conditional-operator": {
			"patterns": [
				{
					"name": "keyword.operator.conditional.question-mark.vein",
					"match": "\\?(?!\\?|\\s*[.\\[])"
				},
				{
					"name": "keyword.operator.conditional.colon.vein",
					"match": ":"
				}
			]
		},
		"assignment-expression": {
			"begin": "(?:\\*|/|%|\\+|-|\\?\\?|\\&|\\^|<<|>>>?|\\|)?=(?!=|>)",
			"beginCaptures": {
				"0": {
					"patterns": [
						{
							"include": "#assignment-operators"
						}
					]
				}
			},
			"end": "(?=[,\\)\\];}])",
			"patterns": [
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#expression"
				}
			]
		},
		"char-literal": {
			"name": "string.quoted.single.vein",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.char.begin.vein"
				}
			},
			"end": "(\\')|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.char.end.vein"
				},
				"2": {
					"name": "invalid.illegal.newline.vein"
				}
			},
			"patterns": [
				{
					"include": "#char-character-escape"
				}
			]
		},
		"char-character-escape": {
			"name": "constant.character.escape.vein",
			"match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})"
		},
		"string-literal": {
			"name": "string.quoted.double.vein",
			"begin": "(?<!@)\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.vein"
				}
			},
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.vein"
				},
				"2": {
					"name": "invalid.illegal.newline.vein"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.vein",
			"match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})"
		},
		"object-creation-expression": {
			"patterns": [
				{
					"include": "#object-creation-with-parameters"
				},
				{
					"include": "#object-creation-expression-with-no-parameters"
				}
			]
		},
		"this-or-base-expression": {
			"match": "\\b(?:(base)|(this)|(self))\\b",
			"captures": {
				"1": {
					"name": "keyword.other.base.vein"
				},
				"2": {
					"name": "keyword.other.this.vein"
				},
				"3": {
					"name": "entity.name.type"
				}
			}
		},
		"type": {
			"name": "meta.type.vein",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#readonly-modifier"
				},
				{
					"include": "#type-builtin"
				},
				{
					"include": "#type-name"
				},
				{
					"include": "#type-arguments"
				},
				{
					"include": "#type-array-suffix"
				}
			]
		},
		"nameof-expression": {
			"begin": "(?<!\\.)\\b(nameof)\\b\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.nameof.vein"
				},
				"2": {
					"name": "punctuation.parenthesis.open.vein"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.vein"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"operation-declaration": {
			"begin": "\\b(operation)\\s+(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)(?<template_key><(\\S)>)?(\\(.+?\\)?)\\s?+(:)\\s?+(\\S+)(\\s?+(where)\\s?+(\\S+)\\s?+(is)\\s?+(struct|class))?",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.vein"
				},
				"2": {
					"name": "entity.name.function.vein"
				},
				"4": {
					"name": "constant.numeric.generic.vein"
				},
				"5": {
					"patterns": [
						{
							"include": "#operation-argument-list"
						}
					]
				},
				"6": {
					"name": "keyword.operator.vein"
				},
				"7": {
					"name": "entity.name.type"
				},
				"9": {
					"name": "keyword.type"
				},
				"10": {
					"name": "constant.numeric.generic.vein"
				},
				"11": {
					"name": "keyword.type"
				},
				"12": {
					"name": "keyword.type"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#gc-modifier"
				},
				{
					"include": "#sync-modifier"
				},
				{
					"include": "#body-operation-statament"
				}
			]
		},
		"class-or-struct-members": {
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#type-declarations"
				},
				{
					"include": "#property-declaration"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#event-declaration"
				},
				{
					"include": "#indexer-declaration"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#constructor-declaration"
				},
				{
					"include": "#destructor-declaration"
				},
				{
					"include": "#storage-modifier"
				},
				{
					"include": "#operator-declaration"
				},
				{
					"include": "#conversion-operator-declaration"
				},
				{
					"include": "#tor-declaration"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#attribute-section"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"argument-list": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.vein"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.vein"
				}
			},
			"patterns": [
				{
					"include": "#argument"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.operator.bitwise.shift.vein",
					"match": "<<|>>>?"
				},
				{
					"name": "keyword.operator.comparison.vein",
					"match": "==|!="
				},
				{
					"name": "keyword.operator.relational.vein",
					"match": "<=|>=|<|>"
				},
				{
					"name": "keyword.operator.logical.vein",
					"match": "\\!|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.bitwise.vein",
					"match": "\\&|~|\\^|\\|"
				},
				{
					"name": "keyword.operator.decrement.vein",
					"match": "--"
				},
				{
					"name": "keyword.operator.increment.vein",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.arithmetic.vein",
					"match": "\\+|-(?!>)|\\*|/|%"
				},
				{
					"name": "keyword.operator.null-coalescing.vein",
					"match": "\\?\\?"
				},
				{
					"name": "keyword.operator.range.vein",
					"match": "\\.\\."
				}
			]
		},
		"operation-argument-list": {
			"match": "((?<variable_name>[a-zA-Z0-9]+)\\s?+\\:\\s?+(?<type_name>[a-zA-Z0-9]+))(,?)+",
			"captures": {
				"2": {
					"name": "entity.name.variable.local.vein"
				},
				"3": {
					"name": "entity.name.type"
				}
			}
		},
		"declaration-expression-local": {
			"match": "((?<variable_name>[a-zA-Z0-9]+)\\s?+\\:\\s?+(?<type_name>[a-zA-Z0-9]+))(,?)+",
			"captures": {
				"2": {
					"name": "entity.name.variable.local.vein"
				},
				"3": {
					"name": "entity.name.type"
				}
			}
		},
		"argument": {
			"patterns": [
				{
					"name": "storage.modifier.vein",
					"match": "\\b(ref|out|in)\\b"
				},
				{
					"include": "#global_keywords"
				},
				{
					"include": "#declaration-expression-local"
				}
			]
		},
		"parenthesized-parameter-list": {
			"begin": "(\\()",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.vein"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.vein"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#attribute-section"
				},
				{
					"include": "#parameter"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"property-declaration": {
			"begin": "(@?[_[:alpha:]][_[:alnum:]]*)(?>\\s?+)\\:(?>\\s?+)(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?=\\{|=>|\\|\\>|$)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.variable.field.vein"
				},
				"2": {
					"name": "entity.name.type"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#property-accessors"
				},
				{
					"include": "#accessor-getter-expression"
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#class-or-struct-members"
				},
				{
					"include": "#expression"
				}
			]
		},
		"accessor-getter-expression": {
			"begin": "\\|>",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.arrow.vein"
				}
			},
			"end": "(?=;|\\})",
			"contentName": "meta.accessor.getter.vein",
			"patterns": [
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#expression"
				}
			]
		},
		"accessor-setter": {
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.vein"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.vein"
						}
					},
					"contentName": "meta.accessor.setter.vein",
					"patterns": [
						{
							"include": "#statement"
						}
					]
				},
				{
					"begin": "=>",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.arrow.vein"
						}
					},
					"end": "(?=;|\\})",
					"contentName": "meta.accessor.setter.vein",
					"patterns": [
						{
							"include": "#ref-modifier"
						},
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"local-variable-declaration": {
			"begin": "(?x)\n(?:\n    (?:(\\busing)\\s+)?\n    (?:(\\bref)\\s+(?:(\\breadonly)\\s+)?)?(\\bauto|let\\b)|\n    (?<type_name>\n    (?:\n        (?:ref\\s+(?:readonly\\s+)?)?\n        (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? \n        )\n    )\n    )\n)\\s+\n(\\g<identifier>)\\s*\n(?!=>)\n(?=,|;|=|\\))",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.using.vein"
				},
				"2": {
					"name": "storage.modifier.vein"
				},
				"3": {
					"name": "storage.modifier.vein"
				},
				"4": {
					"name": "keyword.other.var.vein"
				},
				"5": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"7": {
					"name": "variable.other.constant.local.vein"
				}
			},
			"end": "(?=;|\\))",
			"patterns": [
				{
					"include": "#global_keywords"
				},
				{
					"name": "variable.other.constant.local.vein",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"variable-initializer": {
			"begin": "(?<!=|!)(=)(?!=|>)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.assignment.vein"
				}
			},
			"end": "(?=[,\\)\\];}])",
			"patterns": [
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#expression"
				}
			]
		},
		"property-accessors": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.open.vein"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.close.vein"
				}
			},
			"patterns": [
				{
					"name": "storage.modifier.vein",
					"match": "\\b(private|protected|internal)\\b"
				},
				{
					"name": "keyword.other.get.vein",
					"match": "\\b(get)\\b"
				},
				{
					"name": "keyword.other.set.vein",
					"match": "\\b(set)\\b"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#attribute-section"
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#block"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"attribute-section": {
			"begin": "(\\[)(assembly|module|field|event|method|param|property|return|type)?(\\:)?",
			"beginCaptures": {
				"1": {
					"name": "punctuation.squarebracket.open.vein"
				},
				"2": {
					"name": "keyword.other.attribute-specifier.vein"
				},
				"3": {
					"name": "punctuation.separator.colon.vein"
				}
			},
			"end": "(\\])",
			"endCaptures": {
				"1": {
					"name": "punctuation.squarebracket.close.vein"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#attribute"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"attribute": {
			"patterns": [
				{
					"include": "#type-name"
				},
				{
					"include": "#attribute-arguments"
				}
			]
		},
		"attribute-arguments": {
			"begin": "(\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.parenthesis.open.vein"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.close.vein"
				}
			},
			"patterns": [
				{
					"include": "#attribute-named-argument"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"gc-modifier": {
			"name": "entity.operation.gc.vein",
			"match": "(?x)(gc)\\s+(((nocontrol|auto)\\;))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.gc.vein"
				},
				"4": {
					"name": "keyword.control.gc.vein"
				}
			}
		},
		"sync-modifier": {
			"name": "entity.operation.sync.vein",
			"match": "(?x)(sync)\\s+(((nocontrol|auto|inheritable)\\;)|\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.sync.vein"
				},
				"4": {
					"name": "keyword.control.sync.vein"
				}
			}
		},
		"body-operation-statament": {
			"begin": "\\b(body)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.body.vein"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.vein"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.vein"
						}
					},
					"patterns": [
						{
							"include": "#literal"
						},
						{
							"include": "#interpolated-string"
						},
						{
							"include": "#comment"
						},
						{
							"include": "#punctuation-accessor"
						},
						{
							"include": "#parenthesized-parameter-list"
						},
						{
							"include": "#generic-constraints"
						},
						{
							"include": "#expression-body"
						},
						{
							"include": "#block"
						},
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"object-creation-with-parameters": {
			"begin": "(new)\\s+([_[:alpha:]][_[:alnum:]]*)(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.new.vein"
				},
				"2": {
					"name": "entity.name.type",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#argument-list"
				}
			]
		},
		"enum-declaration": {
			"begin": "(?=\\benum\\b)",
			"end": "(?<=\\})",
			"patterns": [
				{
					"begin": "(?=enum)",
					"end": "(?=\\{)",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"match": "(enum)\\s+(@?[_[:alpha:]][_[:alnum:]]*)",
							"captures": {
								"1": {
									"name": "storage.type.enum.vein"
								},
								"2": {
									"name": "entity.name.type.enum.vein"
								}
							}
						},
						{
							"begin": ":",
							"beginCaptures": {
								"0": {
									"name": "punctuation.separator.colon.vein"
								}
							},
							"end": "(?=\\{)",
							"patterns": [
								{
									"include": "#type"
								}
							]
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.vein"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.vein"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor"
						},
						{
							"include": "#comment"
						},
						{
							"include": "#attribute-section"
						},
						{
							"include": "#punctuation-comma"
						},
						{
							"begin": "@?[_[:alpha:]][_[:alnum:]]*",
							"beginCaptures": {
								"0": {
									"name": "entity.name.variable.enum-member.vein"
								}
							},
							"end": "(?=(,|\\}))",
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						}
					]
				},
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				}
			]
		}
	}
}